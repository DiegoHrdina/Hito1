---
title: "HITO 2"
author: "Diego Hrdina"
format: html
editor: visual
---

## HITO 2

### Valoración opciones aplicada

Tome en consideración el modelo continuio de Black and Scholes:

$$C(S,t)=S\cdot\Phi(d_1)-K\exp(-R\cdot t)\cdot\Phi(d_2)$$

donde $d_1=\frac{\log\frac{S}{K}+\left(R+\frac{\sigma^2}{2}\right)\cdot t}{\sqrt{\sigma^2\cdot t}}$ y $d_2=d_1-\sqrt{\sigma^2\cdot t}$.

Se definieron los parametros asociados a los valores del activo "CENCOSUD", para luego calcular el valor de una opción de compra.

## Black-Scholes

```{r}
library(tidyverse)
library(tidyquant)  
end <- as_date("2023-10-25")
CENCOSUD <- tq_get("CENCOSUD.SN", get = "stock.prices", from = "2015-01-01", to = end)

```

```{r}
# Cálculo de la desviación estándar
desviacion_estandar <- sd(CENCOSUD$close)

# Cálculo de la media
media <- mean(CENCOSUD$close)

# Cálculo del máximo
maximo <- max(CENCOSUD$close)

# Imprimir los resultados
cat("Desviación Estándar:", desviacion_estandar, "\n")
cat("Media:", media, "\n")
cat("Máximo:", maximo, "\n")

```

```{r}
# Datos proporcionados
S <- tail(CENCOSUD$close, 1)  # Precio actual del activo subyacente
K <- 1400 # Precio de ejercicio de la opción
R <- 0.005  # Tasa de interés libre de riesgo (0,5%)
t <- 1  # Tiempo hasta la expiración de la opción (1 año)

sigma <- (desviacion_estandar/media)  # Volatilidad del precio del activo subyacente (usamos la desviación estándar partido en la media, ya que tiene que ser un porcentaje)

# Calcular d1 y d2
d1 <- (log(S / K) + (R + (sigma^2) / 2) * t) / (sigma * sqrt(t))
d2 <- d1 - (sigma * sqrt(t))

# Calcular el precio de la opción de compra
precio_opcion <- (S * pnorm(d1) - K * exp(-R * t) * pnorm(d2))

# Imprimir el resultado
cat("Precio de la opción de compra (Black-Scholes):", precio_opcion, "\n")

cat("Precio actual:", S, "\n")
cat("d1:", d1, "\n")
cat("d2:", d2, "\n")
cat("sigma:", sigma, "\n")
```

## Simulación Monte Carlo

En una simulación Monte Carlo, estimamos el precio de la opción mediante la generación de múltiples escenarios futuros del precio del activo subyacente. El precio de la opción se calcula como el promedio de los pagos de la opción en estos escenarios.

Los pasos generales para la simulación Monte Carlo son los siguientes:

1.  Generar múltiples trayectorias aleatorias de precios para el activo subyacente utilizando un proceso estocástico. En nuestro caso, utilizamos un modelo de movimiento Browniano geométrico para modelar la dinámica del precio del activo.
2.  Calcular el pago de la opción para cada trayectoria de precios.
3.  Calcular el promedio de los pagos de la opción para obtener el precio estimado de la opción.

La fórmula para el precio de una opción de compra europea utilizando la simulación Monte Carlo es la siguiente:

$$C(S,t) \approx e^{-R \cdot t} \cdot \frac{1}{N} \sum_{i=1}^{N} \max(S_i - K, 0)$$ Donde:

\- $C(S,t)$ es el precio de la opción.

\- $S_i$ es el precio del activo subyacente en el tiempo de vencimiento (t).

\- $K$ es el precio de ejercicio de la opción.

\- $N$ es el número de escenarios de simulación.

\- $R$ es la tasa de interés libre de riesgo.

```{r}
# Configuración de parámetros
n_simulaciones <- 10000  # Número de simulaciones
n_pasos <- 252  # Número de pasos en cada simulación (aproximadamente 252 días hábiles en un año)
tiempo_simulacion <- 1  # Tiempo hasta la expiración de la opción en años

# Crear una función para simular el precio del activo subyacente
simular_precio <- function(S, R, sigma, n_pasos, tiempo_simulacion) {
  dt <- tiempo_simulacion / n_pasos
  precios <- numeric(n_pasos + 1)
  precios[1] <- S
  for (i in 1:n_pasos) {
    z <- rnorm(1)  # Generar un número aleatorio de una distribución normal estándar
    dS <- R * precios[i] * dt + sigma * precios[i] * sqrt(dt) * z
    precios[i + 1] <- precios[i] + dS
  }
  return(precios)
}

# Realizar las simulaciones
resultados_simulaciones <- numeric(n_simulaciones)

for (i in 1:n_simulaciones) {
  trayectoria_precio <- simular_precio(S, R, sigma, n_pasos, tiempo_simulacion)
  precio_opcion_simulacion <- pmax(trayectoria_precio[n_pasos + 1] - K, 0) * exp(-R * tiempo_simulacion)
  resultados_simulaciones[i] <- precio_opcion_simulacion
}

# Calcular el precio promedio de la opción de compra mediante Monte Carlo
precio_promedio_monte_carlo <- mean(resultados_simulaciones)


cat("Precio promedio de la opción de compra (Monte Carlo):", precio_promedio_monte_carlo, "\n")
cat("Numero de iteraciones:", n_simulaciones, "\n")


```
